# ----------------------------------------------------------------------
# Numenta Platform for Intelligent Computing (NuPIC)
# Copyright (C) 2019, Numenta, Inc.  Unless you have an agreement
# with Numenta, Inc., for a separate license for this software code, the
# following terms and conditions apply:
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero Public License version 3 as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU Affero Public License for more details.
#
# You should have received a copy of the GNU Affero Public License
# along with this program.  If not, see http://www.gnu.org/licenses.
#
# http://numenta.org/licenses/
# ----------------------------------------------------------------------
[DEFAULT]
path = ~/nta/results/gsc
data_dir = ~/nta/data/gsc_preprocessed
verbose = 2
num_classes = 12
checkpoint_freq = 0
checkpoint_at_end = False
gpu_percentage = 0.5

; Uncomment to average over multiple seeds
;repetitions = 1
;seed = 42
repetitions = 4
seed = tune.sample_from(lambda spec: np.random.randint(1, 1000000))

iterations = 30             # Number of training epochs
batch_size = 16
batches_in_epoch = 5121
test_batch_size = 1000
num_workers=4

learning_rate = 0.01
weight_decay = 0.01
learning_rate_factor = 0.9
use_batch_norm = True
momentum = 0.0
boost_strength = 1.5
boost_strength_factor = 0.9
linear_n = (1000, )
linear_percent_on = (1.0, )
weight_sparsity = (0.50, )
cnn_percent_on = (1.0, 1.0)
k_inference_factor = 1.0

log_interval = 400         # how many minibatches to wait before logging
test_noise_every_epoch = False # If False, will only test noise at end

background_noise_dir = _background_noise_

optimizer = SGD
; Learning Rate Scheduler. See "torch.optim.lr_scheduler" for valid class names
lr_scheduler = StepLR

model_type = le_sparse
activation_fct_before_max_pool = True
dropout = 0.0

input_shape = (1, 32, 32)

;[quick]
;linear_n = (100,)
;linear_percent_on = (0.1,)
;cnn_out_channels = (8, 8)
;cnn_percent_on = (0.095, 0.125)
;cnn_weight_sparsity = (1.0, 1.0)
;k_inference_factor = 1.5
;min_epoch_for_checkpoint = 3
;iterations = 2
;boost_strength = 1.5
;boost_strength_factor = 0.9
;learning_rate_factor = 0.9
;learning_rate = 0.01
;momentum = 0.0
;weight_sparsity = (0.4,)
;dropout = 0.0
;log_interval = 400
;batches_in_epoch = 3
;batch_size = 16
;model_type = le_sparse

# Baselines using dense networks
[RELU_Base]
cnn_out_channels = (64, 64)
cnn_weight_sparsity = (0.5, 0.2)
linear_n = (1000,)
weight_sparsity = (0.1,)

[Kwinner_Base]
cnn_out_channels = (64, 64)
cnn_weight_sparsity = (0.5, 0.2)
linear_n = (1000,)
weight_sparsity = (0.1,)
linear_percent_on = (0.1, )

[Sparse_Baselines]
cnn_out_channels = tune.grid_search([(64, 64), (64, 96), (64, 128), ])
linear_n = tune.grid_search([(750, ), (1000, ), (1500, ), (2000, )])
cnn_weight_sparsity = tune.grid_search([(0.0, 0.2), (0.0, 0.1), (0.0, 0.05), (0.0, 0.02), (0.0, 0.01), ])
weight_sparsity = tune.grid_search([(0.05, ), (0.025, ), (0.02, ), (0.01, ), (0.005, ) ])

[Sparse_Baselines2]
cnn_out_channels = tune.grid_search([(64, 160), (64, 192), ])
linear_n = tune.grid_search([(750, ), (1000, ), (1500, ), (2000, )], )
cnn_weight_sparsity = tune.grid_search([(0.0, 0.2), (0.0, 0.1), (0.0, 0.05), (0.0, 0.02), (0.0, 0.01), (0.0, 0.005), ])
weight_sparsity = tune.grid_search([(0.05, ), (0.025, ), (0.02, ), (0.01, ), (0.005, ), ])

[Sparse_Baselines3]
cnn_out_channels = tune.grid_search([(64, 224), (96, 128), ])
linear_n = tune.grid_search([(500, ), (750, ), (1000, ), (1500, ), ])
cnn_weight_sparsity = tune.grid_search([(0.0, 0.1), (0.0, 0.05), (0.0, 0.02), (0.0, 0.01), (0.0, 0.005), ])
weight_sparsity = tune.grid_search([(0.05, ), (0.025, ), (0.02, ), (0.01, ), (0.005, ), ])

[Sparse_Baselines4]
cnn_out_channels = tune.grid_search([(96, 160), (96, 192), ])
linear_n = tune.grid_search([(500, ), (750, ), (1000, ), (1500, ), ])
cnn_weight_sparsity = tune.grid_search([(0.0, 0.1), (0.0, 0.05), (0.0, 0.02), (0.0, 0.01), (0.0, 0.005), ])
weight_sparsity = tune.grid_search([(0.05, ), (0.025, ), (0.02, ), (0.01, ), (0.005, ), ])

# TODO
[Sparse_Baselines5]
cnn_out_channels = tune.grid_search([(64, 224), (96, 128), ])
linear_n = tune.grid_search([(1000, ), (1500, ), (2000, )])
cnn_weight_sparsity = tune.grid_search([(0.0, 0.02), (0.0, 0.01), (0.0, 0.005),])
weight_sparsity = tune.grid_search([(0.003), (0.002), (0.001), ])



[Kwinner_Sparse_Baselines]
cnn_out_channels = tune.grid_search([(64, 64), (64, 96), (64, 128), ])
linear_n = tune.grid_search([(750, ), (1000, ), (1500, ), (2000, )])
cnn_weight_sparsity = tune.grid_search([(0.0, 0.2), (0.0, 0.1), (0.0, 0.05), (0.0, 0.02), (0.0, 0.01), ])
weight_sparsity = tune.grid_search([(0.05, ), (0.025, ), (0.02, ), (0.01, ), (0.005, ) ])
cnn_percent_on = (1.0, 0.1)
linear_percent_on = (0.1, )

[Kwinner_Sparse_Baselines3]
cnn_out_channels = tune.grid_search([(64, 224), (96, 128), ])
linear_n = tune.grid_search([(1000, ), (1500, ), (2000, )])
cnn_weight_sparsity = tune.grid_search([(0.0, 0.05), (0.0, 0.02), (0.0, 0.01), (0.0, 0.005), (0.0, 0.003), ])
weight_sparsity = tune.grid_search([(0.025, ), (0.02, ), (0.01, ), (0.005, ), (0.003, ), ])
cnn_percent_on = (1.0, 0.1)
linear_percent_on = (0.1, )

