# ----------------------------------------------------------------------
# Numenta Platform for Intelligent Computing (NuPIC)
# Copyright (C) 2019, Numenta, Inc.  Unless you have an agreement
# with Numenta, Inc., for a separate license for this software code, the
# following terms and conditions apply:
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero Public License version 3 as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU Affero Public License for more details.
#
# You should have received a copy of the GNU Affero Public License
# along with this program.  If not, see http://www.gnu.org/licenses.
#
# http://numenta.org/licenses/
# ----------------------------------------------------------------------
[DEFAULT]
; Uncomment to save results to S3
;upload_dir = "s3://bucketname/ray/whydense/gsc"
;sync_function = "aws s3 sync `dirname {local_dir}` {remote_dir}/`basename $(dirname {local_dir})`"

path = ~/nta/results/gsc
data_dir = ~/nta/data/gsc_preprocessed
verbose = 2
num_classes = 12
checkpoint_freq = 1
checkpoint_at_end = False
gpu_percentage = 1.0

; Uncomment to average over multiple seeds
;repetitions = 1
;seed = 42
repetitions = 8
seed = tune.sample_from(lambda spec: np.random.randint(1, 10000))

iterations = 30             # Number of training epochs
batch_size = 16
batches_in_epoch = 5121
test_batch_size = 1000
num_workers=4

learning_rate = 0.01
weight_decay = 0.01
learning_rate_factor = 0.9
use_batch_norm = True
momentum = 0.0
boost_strength = 1.5
boost_strength_factor = 0.9
linear_n = 2000
linear_percent_on = 1.0
weight_sparsity = (0.50, )
cnn_percent_on = (1.0, 1.0)
k_inference_factor = 1.0

log_interval = 400         # how many minibatches to wait before logging
test_noise_every_epoch = False # If False, will only test noise at end

background_noise_dir = _background_noise_

optimizer = SGD

; Learning Rate Scheduler. See "torch.optim.lr_scheduler" for valid class names
lr_scheduler = StepLR

model_type = le_sparse
activation_fct_before_max_pool = True
dropout = 0.0

input_shape = (1, 32, 32)

;[quick]
;linear_n = (100,)
;linear_percent_on = (0.1,)
;cnn_out_channels = (8, 8)
;cnn_percent_on = (0.095, 0.125)
;cnn_weight_sparsity = (1.0, 1.0)
;k_inference_factor = 1.5
;min_epoch_for_checkpoint = 3
;iterations = 2
;boost_strength = 1.5
;boost_strength_factor = 0.9
;learning_rate_factor = 0.9
;learning_rate = 0.01
;momentum = 0.0
;weight_sparsity = (0.4,)
;dropout = 0.0
;log_interval = 400
;batches_in_epoch = 3
;batch_size = 16
;model_type = le_sparse

;[RELU_Base]
;cnn_out_channels = (64, 64)
;cnn_weight_sparsity = (0.5, 0.2)
;linear_n = (1000,)
;linear_percent_on = (0.1,)
;weight_sparsity = (0.1,)
;
;# Accuracy:
;# Params: 193,372
;[RELU_1]
;cnn_out_channels = (64, 96)
;cnn_weight_sparsity = (0.5, 0.12)
;linear_n = (1500,)
;linear_percent_on = (0.1,)
;weight_sparsity = (0.043,)
;
;# Accuracy:
;# Params: 179,820
;[RELU_1_S1]
;cnn_out_channels = (64, 96)
;cnn_weight_sparsity = (0.5, 0.1)
;linear_n = (1500,)
;linear_percent_on = (0.1,)
;weight_sparsity = (0.04,)
;
;# Accuracy:
;# Params: 189,392
;[RELU_2]
;cnn_out_channels = (64, 96)
;cnn_weight_sparsity = (0.5, 0.12)
;linear_n = (2000,)
;linear_percent_on = (0.1,)
;weight_sparsity = (0.03,)
;
;# Accuracy:
;# Params:
;[RELU_2_S1]
;cnn_out_channels = (64, 96)
;cnn_weight_sparsity = (0.5, 0.08)
;linear_n = (2000,)
;linear_percent_on = (0.1,)
;weight_sparsity = (0.03,)
;
;# Accuracy:
;# Params:
;[RELU_2_S2]
;cnn_out_channels = (64, 96)
;cnn_weight_sparsity = (0.5, 0.08)
;linear_n = (2000,)
;linear_percent_on = (0.1,)
;weight_sparsity = (0.025,)
;
;# Accuracy:
;# Params:
;[RELU_2_S3]
;cnn_out_channels = (64, 96)
;cnn_weight_sparsity = (1.0, 0.07)
;linear_n = (2000,)
;linear_percent_on = (0.1,)
;weight_sparsity = (0.025,)
;
;[RELU_2_S4]
;cnn_out_channels = (64, 96)
;cnn_weight_sparsity = (1.0, 0.06)
;linear_n = (2000,)
;linear_percent_on = (0.1,)
;weight_sparsity = (0.025,)
;
;[RELU_2_S5]
;cnn_out_channels = (64, 96)
;cnn_weight_sparsity = (1.0, 0.05)
;linear_n = (2000,)
;linear_percent_on = (0.1,)
;weight_sparsity = (0.025,)
;
;[RELU_2_S6]
;cnn_out_channels = (64, 96)
;cnn_weight_sparsity = (1.0, 0.04)
;linear_n = (2000,)
;linear_percent_on = (0.1,)
;weight_sparsity = (0.025,)
;
;[RELU_2_S7]
;cnn_out_channels = (64, 96)
;cnn_weight_sparsity = (1.0, 0.03)
;linear_n = (2000,)
;linear_percent_on = (0.1,)
;weight_sparsity = (0.025,)
;
;[RELU_2_S8]
;cnn_out_channels = (64, 96)
;cnn_weight_sparsity = (1.0, 0.02)
;linear_n = (2000,)
;linear_percent_on = (0.1,)
;weight_sparsity = (0.025,)
;
;[RELU_2_S9]
;cnn_out_channels = (64, 96)
;cnn_weight_sparsity = (1.0, 0.01)
;linear_n = (2000,)
;linear_percent_on = (0.1,)
;weight_sparsity = (0.025,)
;
;
;[RELU_2_S10]
;cnn_out_channels = (64, 96)
;cnn_weight_sparsity = (1.0, 0.07)
;linear_n = (2000,)
;linear_percent_on = (0.1,)
;weight_sparsity = (0.019,)
;
;[RELU_2_S11]
;cnn_out_channels = (64, 96)
;cnn_weight_sparsity = (1.0, 0.07)
;linear_n = (2000,)
;linear_percent_on = (0.1,)
;weight_sparsity = (0.0145,)
;
;[RELU_2_S12]
;cnn_out_channels = (64, 96)
;cnn_weight_sparsity = (1.0, 0.07)
;linear_n = (2000,)
;linear_percent_on = (0.1,)
;weight_sparsity = (0.012,)
;
[RELU_2_S13]
cnn_out_channels = (64, 96)
cnn_weight_sparsity = (1.0, 0.07)
linear_n = (2000,)
linear_percent_on = (0.1,)
weight_sparsity = (0.011,)

[RELU_2_S14]
cnn_out_channels = (64, 96)
cnn_weight_sparsity = (1.0, 0.07)
linear_n = (2000,)
linear_percent_on = (0.1,)
weight_sparsity = (0.009,)

[RELU_2_S15]
cnn_out_channels = (64, 96)
cnn_weight_sparsity = (1.0, 0.07)
linear_n = (2000,)
linear_percent_on = (0.1,)
weight_sparsity = (0.007,)


;# Accuracy:
;# Params:
;[RELU_3]
;cnn_out_channels = (64, 128)
;cnn_weight_sparsity = (1.0, 0.08)
;linear_n = (2000,)
;linear_percent_on = (0.1,)
;weight_sparsity = (0.023,)
;
;# Accuracy:
;# Params:
;[RELU_3_S1]
;cnn_out_channels = (64, 128)
;cnn_weight_sparsity = (1.0, 0.08)
;linear_n = (2000,)
;linear_percent_on = (0.1,)
;weight_sparsity = (0.021,)
;
;# Accuracy:
;# Params:
;[RELU_3_S2]
;cnn_out_channels = (64, 128)
;cnn_weight_sparsity = (1.0, 0.07)
;linear_n = (2000,)
;linear_percent_on = (0.1,)
;weight_sparsity = (0.0215,)
;
;# Accuracy:
;# Params:
;[RELU_3_S3]
;cnn_out_channels = (64, 128)
;cnn_weight_sparsity = (1.0, 0.06)
;linear_n = (2000,)
;linear_percent_on = (0.1,)
;weight_sparsity = (0.0215,)
;
;# Accuracy:
;# Params:
;[RELU_3_S4]
;cnn_out_channels = (64, 128)
;cnn_weight_sparsity = (1.0, 0.055)
;linear_n = (2000,)
;linear_percent_on = (0.1,)
;weight_sparsity = (0.0215,)
;
;# Accuracy:
;# Params:
;[RELU_3_S5]
;cnn_out_channels = (64, 128)
;cnn_weight_sparsity = (1.0, 0.05)
;linear_n = (2000,)
;linear_percent_on = (0.1,)
;weight_sparsity = (0.0215,)
;
;# Accuracy:
;# Params:
;[RELU_3_S6]
;cnn_out_channels = (64, 128)
;cnn_weight_sparsity = (1.0, 0.045)
;linear_n = (2000,)
;linear_percent_on = (0.1,)
;weight_sparsity = (0.0215,)
;
;# Accuracy:
;# Params:
;[RELU_3_S7]
;cnn_out_channels = (64, 128)
;cnn_weight_sparsity = (1.0, 0.04)
;linear_n = (2000,)
;linear_percent_on = (0.1,)
;weight_sparsity = (0.0215,)
;
;# Accuracy:
;# Params:
;[RELU_3_S8]
;cnn_out_channels = (64, 128)
;cnn_weight_sparsity = (1.0, 0.035)
;linear_n = (2000,)
;linear_percent_on = (0.1,)
;weight_sparsity = (0.0215,)
;
;[RELU_3_S9]
;cnn_out_channels = (64, 128)
;cnn_weight_sparsity = (1.0, 0.03)
;linear_n = (2000,)
;linear_percent_on = (0.1,)
;weight_sparsity = (0.0215,)
;
;[RELU_3_S10]
;cnn_out_channels = (64, 128)
;cnn_weight_sparsity = (1.0, 0.02)
;linear_n = (2000,)
;linear_percent_on = (0.1,)
;weight_sparsity = (0.0215,)
;
;[RELU_3_S11]
;cnn_out_channels = (64, 128)
;cnn_weight_sparsity = (1.0, 0.015)
;linear_n = (2000,)
;linear_percent_on = (0.1,)
;weight_sparsity = (0.0215,)
;
;[RELU_3_S12]
;cnn_out_channels = (64, 128)
;cnn_weight_sparsity = (1.0, 0.01)
;linear_n = (2000,)
;linear_percent_on = (0.1,)
;weight_sparsity = (0.0215,)
;
;[RELU_3_S13]
;cnn_out_channels = (64, 128)
;cnn_weight_sparsity = (1.0, 0.045)
;linear_n = (2000,)
;linear_percent_on = (0.1,)
;weight_sparsity = (0.02,)
;
;[RELU_3_S14]
;cnn_out_channels = (64, 128)
;cnn_weight_sparsity = (1.0, 0.045)
;linear_n = (2000,)
;linear_percent_on = (0.1,)
;weight_sparsity = (0.017,)
;
;[RELU_3_S15]
;cnn_out_channels = (64, 128)
;cnn_weight_sparsity = (1.0, 0.045)
;linear_n = (2000,)
;linear_percent_on = (0.1,)
;weight_sparsity = (0.014,)
;
;[RELU_3_S16]
;cnn_out_channels = (64, 128)
;cnn_weight_sparsity = (1.0, 0.045)
;linear_n = (2000,)
;linear_percent_on = (0.1,)
;weight_sparsity = (0.011,)
;
;[RELU_3_S17]
;cnn_out_channels = (64, 128)
;cnn_weight_sparsity = (1.0, 0.045)
;linear_n = (2000,)
;linear_percent_on = (0.1,)
;weight_sparsity = (0.009,)
;
;
;
;# Accuracy:
;# Params:
;[RELU_4]
;cnn_out_channels = (96, 128)
;cnn_weight_sparsity = (1.0, 0.055)
;linear_n = (2000,)
;linear_percent_on = (0.1,)
;weight_sparsity = (0.02,)
;
;# Accuracy:
;# Params:
;[RELU_4_S1]
;cnn_out_channels = (96, 128)
;cnn_weight_sparsity = (1.0, 0.055)
;linear_n = (2000,)
;linear_percent_on = (0.1,)
;weight_sparsity = (0.018,)
;
;# Accuracy:
;# Params:
;[RELU_4_S2]
;cnn_out_channels = (96, 128)
;cnn_weight_sparsity = (1.0, 0.05)
;linear_n = (2000,)
;linear_percent_on = (0.1,)
;weight_sparsity = (0.02,)
;
;# Accuracy:
;# Params:
;[RELU_4_S3]
;cnn_out_channels = (96, 128)
;cnn_weight_sparsity = (1.0, 0.045)
;linear_n = (2000,)
;linear_percent_on = (0.1,)
;weight_sparsity = (0.02,)
;
;# Accuracy:
;# Params:
;[RELU_4_S4]
;cnn_out_channels = (96, 128)
;cnn_weight_sparsity = (1.0, 0.04)
;linear_n = (2000,)
;linear_percent_on = (0.1,)
;weight_sparsity = (0.02,)
;
;# Accuracy:
;# Params:
;[RELU_4_S5]
;cnn_out_channels = (96, 128)
;cnn_weight_sparsity = (1.0, 0.035)
;linear_n = (2000,)
;linear_percent_on = (0.1,)
;weight_sparsity = (0.02,)
;
;# Accuracy:
;# Params:
;[RELU_4_S6]
;cnn_out_channels = (96, 128)
;cnn_weight_sparsity = (1.0, 0.03)
;linear_n = (2000,)
;linear_percent_on = (0.1,)
;weight_sparsity = (0.02,)
;
;# Accuracy:
;# Params:
;[RELU_4_S7]
;cnn_out_channels = (96, 128)
;cnn_weight_sparsity = (1.0, 0.025)
;linear_n = (2000,)
;linear_percent_on = (0.1,)
;weight_sparsity = (0.02,)
;
;# Accuracy:
;# Params:
;[RELU_4_S8]
;cnn_out_channels = (96, 128)
;cnn_weight_sparsity = (1.0, 0.0225)
;linear_n = (2000,)
;linear_percent_on = (0.1,)
;weight_sparsity = (0.02,)
;
;
;
;# Accuracy:
;# Params:
;[RELU_5]
;cnn_out_channels = (96, 160)
;cnn_weight_sparsity = (1.0, 0.05)
;linear_n = (2000,)
;linear_percent_on = (0.1,)
;weight_sparsity = (0.016,)
;
;# Accuracy:
;# Params:
;[RELU_5_1]
;cnn_out_channels = (96, 160)
;cnn_weight_sparsity = (1.0, 0.04)
;linear_n = (2000,)
;linear_percent_on = (0.1,)
;weight_sparsity = (0.016,)
;
;# Accuracy:
;# Params:
;[RELU_5_2]
;cnn_out_channels = (96, 160)
;cnn_weight_sparsity = (1.0, 0.05)
;linear_n = (2000,)
;linear_percent_on = (0.1,)
;weight_sparsity = (0.014,)
;
;# Accuracy:
;# Params:
;[RELU_5_3]
;cnn_out_channels = (96, 160)
;cnn_weight_sparsity = (1.0, 0.04)
;linear_n = (2000,)
;linear_percent_on = (0.1,)
;weight_sparsity = (0.014,)
;
;# Accuracy:
;# Params:
;[RELU_5_4]
;cnn_out_channels = (96, 160)
;cnn_weight_sparsity = (1.0, 0.035)
;linear_n = (2000,)
;linear_percent_on = (0.1,)
;weight_sparsity = (0.014,)
;
;[RELU_6]
;cnn_out_channels = (128, 160)
;cnn_weight_sparsity = (1.0, 0.03)
;linear_n = (2000,)
;linear_percent_on = (0.1,)
;weight_sparsity = (0.014,)
;
;[RELU_6_1]
;cnn_out_channels = (128, 160)
;cnn_weight_sparsity = (1.0, 0.025)
;linear_n = (2000,)
;linear_percent_on = (0.1,)
;weight_sparsity = (0.014,)
;
;[RELU_6_2]
;cnn_out_channels = (128, 160)
;cnn_weight_sparsity = (1.0, 0.02)
;linear_n = (2000,)
;linear_percent_on = (0.1,)
;weight_sparsity = (0.014,)
;
;[RELU_6_3]
;cnn_out_channels = (128, 160)
;cnn_weight_sparsity = (1.0, 0.015)
;linear_n = (2000,)
;linear_percent_on = (0.1,)
;weight_sparsity = (0.014,)
